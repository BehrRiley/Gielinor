# ███ [  When a player is directly connected to event:                          ] ███
# ███ [    - run add_xp def:<#>|<skill> instantly                               ] ███
# ███ [   ex:run add_xp def:100|farming instantly                               ] ███
# ███ [                                                                         ] ███
# ███ [  When a player is NOT directly connected to the event:                  ] ███
# ███ [    - run add_xp_nostring def:<#>|<skill>|<player> instantly             ] ███
# ███ [   ex:run add_xp_nostring def:100|farming|<player[Behr_Riley]> instantly ] ███

# ███ [ returns xp needed for next level                       ] ███ 
xp_calc:
    type: procedure
    definitions: lvl
    script:
        - define pow_term <def[lvl].div[7]>
        - define mul_term <el@300.mul[<el@2.power[<def[pow_term]>]>]>
        - determine <def[lvl].add[<def[mul_term]>].div[4].round_down>

# ███ [ Grants the provided amount of xp to a player           ] ███ 
add_xp:
  type: task
  definitions: xp|skill
  script:
      - if !<player.has_flag[<def[skill]>.ExpReq]>:
          - flag player <def[skill]>.ExpReq:0
      - if !<player.has_flag[<def[skill]>.Level]>:
          - flag player <def[skill]>.Level:1
      - while <def[xp]> > 0:
          - define xp_req <proc[xp_calc].context[<player.flag[<def[skill]>.Level]>]>
          - define to_add <def[xp_req].sub[<player.flag[<def[skill]>.ExpReq]>]>
          - define xp <def[xp].sub[<def[to_add]>]>
          - if <def[xp]> >= 0:
              - flag player <def[skill]>.Level:++
              - flag player <def[skill]>.ExpReq:0
              - narrate "Congratulations, you've just advanced a <&6><def[skill]><&r> level. <&nl>Your <&6><def[skill]><&r> level is now <&6><player.flag[<def[skill]>.Level]><&f>."
          - else:
              - flag player <def[skill]>.ExpReq:+:<def[xp].add[<def[to_add]>]>

# ███ [ Grants the provided amount of xp to an unstrung player ] ███ 
add_xp_nostring:
  type: task
  definitions: xp|skill|player
  script:
      - if !<def[player].has_flag[<def[skill]>.ExpReq]>:
          - flag <def[player]> <def[skill]>.ExpReq:0
      - if !<def[player].has_flag[<def[skill]>.Level]>:
          - flag <def[player]> <def[skill]>.Level:1
      - while <def[xp]> > 0:
          - define xp_req <proc[xp_calc].context[<def[player].flag[<def[skill]>.Level]>]>
          - define to_add <def[xp_req].sub[<def[player].flag[<def[skill]>.ExpReq]>]>
          - define xp <def[xp].sub[<def[to_add]>]>
          - if <def[xp]> >= 0:
              - flag <def[player]> <def[skill]>.Level:++
              - flag <def[player]> <def[skill]>.ExpReq:0
          - else:
              - flag <def[player]> <def[skill]>.ExpReq:+:<def[xp].add[<def[to_add]>]>
